<!-- **** SCRIPTS / SHEET WORKERS -->
<script type="text/worker">
/* ---- BEGIN: TheAaronSheet.js ---- */
// Github:   https://github.com/shdwjk/TheAaronSheet/blob/master/TheAaronSheet.js
// By:       The Aaron, Arcane Scriptomancer
// Contact:  https://app.roll20.net/users/104025/the-aaron
var TAS = TAS || (function(){
    'use strict';

    var version = '0.2.1',
        lastUpdate = 1453794214,

        loggingSettings = {
            debug: {
                key:     'debug',
                title:   'DEBUG',
                color: {
                    bgLabel: '#7732A2',
                    label:   '#F2EF40',
                    bgText:  '#FFFEB7',
                    text:    '#7732A2'
                }
            },
            error: {
                key:     'error',
                title:   'Error',
                color: {
                    bgLabel: '#C11713',
                    label:   'white',
                    bgText:  '#C11713',
                    text:    'white'
                }
            },
            warn: {
                key:     'warn',
                title:   'Warning',
                color: {
                    bgLabel: '#F29140',
                    label:   'white',
                    bgText:  '#FFD8B7',
                    text:    'black'
                }
            },
            info: {
                key:     'info',
                title:   'Info',
                color: {
                    bgLabel: '#413FA9',
                    label:   'white',
                    bgText:  '#B3B2EB',
                    text:    'black'
                }
            },
            notice: {
                key:     'notice',
                title:   'Notice',
                color: {
                    bgLabel: '#33C133',
                    label:   'white',
                    bgText:  '#ADF1AD',
                    text:    'black'
                }
            },
            log: {
                key:     'log',
                title:   'Log',
                color: {
                    bgLabel: '#f2f240',
                    label:   'black',
                    bgText:  '#ffff90',
                    text:    'black'
                }
            },
            callstack: {
                key:     'TAS',
                title:   'function',
                color: {
                    bgLabel: '#413FA9',
                    label:   'white',
                    bgText:  '#B3B2EB',
                    text:    'black'
                }
            },
            callstack_async: {
                key:     'TAS',
                title:   'ASYNC CALL',
                color: {
                    bgLabel: '#413FA9',
                    label:   'white',
                    bgText:  '#413FA9',
                    text:    'white'
                }
            },
            TAS: {
                key:     'TAS',
                title:   'TAS',
                color: {
                    bgLabel: 'grey',
                    label:   'black;background:linear-gradient(#304352,#d7d2cc,#d7d2cc,#d7d2cc,#304352)',
                    bgText:  'grey',
                    text:    'black;background:linear-gradient(#304352,#d7d2cc,#d7d2cc,#d7d2cc,#304352)'
                }
            }
        },


        config = {
            debugMode: false,
            logging: {
                log: true,
                notice: true,
                info: true,
                warn: true,
                error: true,
                debug: false
            }
        },

        callstackRegistry = [],
        queuedUpdates = {}, //< Used for delaying saves till the last momment.

    complexType = function(o){
        switch(typeof o){
            case 'string':
                return 'string';
            case 'boolean':
                return 'boolean';
            case 'number':
                return (_.isNaN(o) ? 'NaN' : (o.toString().match(/\./) ? 'decimal' : 'integer'));
            case 'function':
                return 'function: '+(o.name ? o.name+'()' : '(anonymous)');
            case 'object':
                return (_.isArray(o) ? 'array' : (_.isArguments(o) ? 'arguments' : ( _.isNull(o) ? 'null' : 'object')));
            default:
                return typeof o;
        }
    },

    dataLogger = function(primaryLogger,secondaryLogger,data){
        _.each(data,function(m){
            var type = complexType(m);
            switch(type){
                case 'string':
                    primaryLogger(m);
                    break;
                case 'undefined':
                case 'null':
                case 'NaN':
                    primaryLogger('['+type+']');
                    break;
                case 'number':
                case 'not a number':
                case 'integer':
                case 'decimal':
                case 'boolean':
                    primaryLogger('['+type+']: '+m);
                    break;
                default:
                    primaryLogger('['+type+']:=========================================');
                    secondaryLogger(m);
                    primaryLogger('=========================================================');
                    break;
            }
        });
    },


    colorLog = function(options){
        var coloredLoggerFunction,
            key = options.key,
            label = options.title || 'TAS',
            lBGColor = (options.color && options.color.bgLabel) || 'blue',
            lTxtColor = (options.color && options.color.label) || 'white',
            mBGColor = (options.color && options.color.bgText) || 'blue',
            mTxtColor = (options.color && options.color.text) || 'white';

        coloredLoggerFunction = function(message){
            console.log(
                '%c '+label+': %c '+message,
                'background-color: '+lBGColor+';color: '+lTxtColor+'; font-weight:bold;',
                'background-color: '+mBGColor+';color: '+mTxtColor+';'
            );
        };
        return function(){
            if('TAS'===key || config.logging[key]){
               dataLogger(coloredLoggerFunction,function(m){console.log(m);},_.toArray(arguments));
            }
        };
    },

    logDebug  = colorLog(loggingSettings.debug),
    logError  = colorLog(loggingSettings.error),
    logWarn   = colorLog(loggingSettings.warn),
    logInfo   = colorLog(loggingSettings.info),
    logNotice = colorLog(loggingSettings.notice),
    logLog    = colorLog(loggingSettings.log),
    log       = colorLog(loggingSettings.TAS),
    logCS     = colorLog(loggingSettings.callstack),
    logCSA    = colorLog(loggingSettings.callstack_async),

    registerCallstack = function(callstack,label){
        var idx=_.findIndex(callstackRegistry,function(o){
            return (_.difference(o.stack,callstack).length === _.difference(callstack,o.stack).length)
                && _.difference(o.stack,callstack).length === 0
                && o.label === label;
        });
        if(-1 === idx){
            idx=callstackRegistry.length;
            callstackRegistry.push({
                stack: callstack,
                label: label
            });
        }
        return idx;
    },

    setConfigOption = function(options){
        var newconf =_.defaults(options,config);
        newconf.logging=_.defaults(
            (options && options.logging)||{},
            config.logging
        );
        config=newconf;
    },

    debugMode = function(){
        config.logging.debug=true;
        config.debugMode = true;
    },

    getCallstack = function(){
        var e = new Error('dummy'),
            stack = _.map(_.rest(e.stack.replace(/^[^\(]+?[\n$]/gm, '')
            .replace(/^\s+at\s+/gm, '')
            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
            .split('\n')),function(l){
                return l.replace(/\s+.*$/,'');
            });
        return stack;
    },
    logCallstackSub = function(cs){
        var matches, csa;
        _.find(cs,function(line){
            matches = line.match(/TAS_CALLSTACK_(\d+)/);
            if(matches){
               csa=callstackRegistry[matches[1]];
               logCSA( '===================='+(csa.label ? '> '+csa.label+' <' : '')+'====================');
               logCallstackSub(csa.stack);
               return true;
            }
            logCS(line);
            return false;
        });
    },
    logCallstack = function(){
        var cs;
        if(config.debugMode){
            cs = getCallstack();
            cs.shift();
            log('==============================> CALLSTACK <==============================');
            logCallstackSub(cs);
            log('=========================================================================');
        }
    },


    wrapCallback = function (label, callback,context){
        var callstack;
        if('function' === typeof label){
            context=callback;
            callback=label;
            label=undefined;
        }
        if(!config.debugMode){
            return (function(cb,ctx){
                return function(){
                    cb.apply(ctx||{},arguments);
                };
            }(callback,context));
        }

        callstack = getCallstack();
        callstack.shift();

        return (function(cb,ctx,cs,lbl){
            var ctxref=registerCallstack(cs,lbl);
            return new Function('cb','ctx','TASlog',
                "return function TAS_CALLSTACK_"+ctxref+"(){"+
                    "TASlog('Entering: '+(cb.name||'(anonymous function)'));"+
                    "cb.apply(ctx||{},arguments);"+
                    "TASlog('Exiting: '+(cb.name||'(anonymous function)'));"+
                "};")(cb,ctx,log);
        }(callback,context,callstack,label));
    },


    prepareUpdate = function( attribute, value ){
        queuedUpdates[attribute]=value;
    },

    applyQueuedUpdates = function() {
      setAttrs(queuedUpdates);
      queuedUpdates = {};
    },

    namesFromArgs = function(args,base){
        return _.chain(args)
            .reduce(function(memo,attr){
                if('string' === typeof attr) {
                    memo.push(attr);
                } else if(_.isArray(args) || _.isArguments(args)){
                    memo = namesFromArgs(attr,memo);
                }
                return memo;
            },(_.isArray(base) && base) || [])
            .uniq()
            .value();
    },

    addId = function(obj,value){
        Object.defineProperty(obj,'id',{
            value: value,
            writeable: false,
            enumerable: false
        });
    },

    addProp = function(obj,prop,value,fullname){
        (function(){
            var pname=(_.contains(['S','F','I','D'],prop) ? '_'+prop : prop),
                full_pname = fullname || prop,
                pvalue=value;

            _.each(['S','I','F'],function(p){
                if( !_.has(obj,p)){
                    Object.defineProperty(obj, p, {
                        value: {},
                        enumerable: false,
                        readonly: true
                    });
                }
            });
            if( !_.has(obj,'D')){
                Object.defineProperty(obj, 'D', {
                    value: _.reduce(_.range(10),function(m,d){
                            Object.defineProperty(m, d, {
                                value: {},
                                enumerable: true,
                                readonly: true
                            });
                            return m;
                        },{}),
                    enumerable: false,
                    readonly: true
                });
            }


            // Raw value
            Object.defineProperty(obj, pname, {
                enumerable: true,
                set: function(v){
                    pvalue=v;
                    prepareUpdate(full_pname,v);
                },
                get: function(){
                    return pvalue;
                }
            });

            // string value
            Object.defineProperty(obj.S, pname, {
                enumerable: true,
                set: function(v){
                    var val=v.toString();
                    pvalue=val;
                    prepareUpdate(full_pname,val);
                },
                get: function(){
                    return pvalue.toString();
                }
            });

            // int value
            Object.defineProperty(obj.I, pname, {
                enumerable: true,
                set: function(v){
                    var val=parseInt(v,10) || 0;
                    pvalue=val;
                    prepareUpdate(full_pname,val);
                },
                get: function(){
                    return parseInt(pvalue,10) || 0;
                }
            });

            // float value
            Object.defineProperty(obj.F, pname, {
                enumerable: true,
                set: function(v){
                    var val=parseFloat(v) || 0;
                    pvalue=val;
                    prepareUpdate(full_pname,val);
                },
                get: function(){
                    return parseFloat(pvalue) || 0;
                }
            });
            _.each(_.range(10),function(d){
                Object.defineProperty(obj.D[d], pname, {
                    enumerable: true,
                    set: function(v){
                        var val=(parseFloat(v) || 0).toFixed(d);
                        pvalue=val;
                        prepareUpdate(full_pname,val);
                    },
                    get: function(){
                        return (parseFloat(pvalue) || 0).toFixed(d);
                    }
                });
            });

        }());
    },

    repeating = function( section ) {
        return (function(s){
            var sectionName = s,
                attrNames = [],
                fieldNames = [],
                operations = [],
                after = [],

            repAttrs = function TAS_Repeating_Attrs(){
                attrNames = namesFromArgs(arguments,attrNames);
                return this;
            },
            repFields = function TAS_Repeating_Fields(){
                fieldNames = namesFromArgs(arguments,fieldNames);
                return this;
            },
            repReduce = function TAS_Repeating_Reduce(func, initial, final, context) {
                operations.push({
                    type: 'reduce',
                    func: (func && _.isFunction(func) && func) || _.noop,
                    memo: (_.isUndefined(initial) && 0) || initial,
                    final: (final && _.isFunction(final) && final) || _.noop,
                    context: context || {}
                });
                return this;
            },
            repMap = function TAS_Repeating_Map(func, final, context) {
                operations.push({
                    type: 'map',
                    func: (func && _.isFunction(func) && func) || _.noop,
                    final: (final && _.isFunction(final) && final) || _.noop,
                    context: context || {}
                });
                return this;
            },
            repEach = function TAS_Repeating_Each(func, final, context) {
                operations.push({
                    type: 'each',
                    func: (func && _.isFunction(func) && func) || _.noop,
                    final: (final && _.isFunction(final) && final) || _.noop,
                    context: context || {}
                });
                return this;
            },
            repTap = function TAS_Repeating_Tap(final, context) {
                operations.push({
                    type: 'tap',
                    final: (final && _.isFunction(final) && final) || _.noop,
                    context: context || {}
                });
                return this;
            },
            repAfter = function TAS_Repeating_After(callback,context) {
                after.push({
                    callback: (callback && _.isFunction(callback) && callback) || _.noop,
                    context: context || {}
                });
                return this;
            },
            repExecute = function TAS_Repeating_Execute(callback,context){
                var rowSet = {},
                    attrSet = {},
                    fieldIds = [],
                    fullFieldNames = [];

                repAfter(callback,context);

                // call each operation per row.
                // call each operation's final
                getSectionIDs("repeating_"+sectionName,function(ids){
                    fieldIds = ids;
                    fullFieldNames = _.reduce(fieldIds,function(memo,id){
                        return memo.concat(_.map(fieldNames,function(name){
                            return 'repeating_'+sectionName+'_'+id+'_'+name;
                        }));
                    },[]);
                    getAttrs( _.uniq(attrNames.concat(fullFieldNames)), function(values){
                        _.each(attrNames,function(aname){
                            if(values.hasOwnProperty(aname)){
                                addProp(attrSet,aname,values[aname]);
                            }
                        });

                        rowSet = _.reduce(fieldIds,function(memo,id){
                            var r={};
                            addId(r,id);
                            _.each(fieldNames,function(name){
                                var fn = 'repeating_'+sectionName+'_'+id+'_'+name;
                                addProp(r,name,values[fn],fn);
                            });

                            memo[id]=r;

                            return memo;
                        },{});

                        _.each(operations,function(op){
                            var res;
                            switch(op.type){
                                case 'tap':
                                    _.bind(op.final,op.context,rowSet,attrSet)();
                                    break;

                                case 'each':
                                    _.each(rowSet,function(r){
                                        _.bind(op.func,op.context,r,attrSet,r.id,rowSet)();
                                    });
                                    _.bind(op.final,op.context,rowSet,attrSet)();
                                    break;

                                case 'map':
                                    res = _.map(rowSet,function(r){
                                        return _.bind(op.func,op.context,r,attrSet,r.id,rowSet)();
                                    });
                                    _.bind(op.final,op.context,res,rowSet,attrSet)();
                                    break;

                                case 'reduce':
                                    res = op.memo;
                                    _.each(rowSet,function(r){
                                        res = _.bind(op.func,op.context,res,r,attrSet,r.id,rowSet)();
                                    });
                                    _.bind(op.final,op.context,res,rowSet,attrSet)();
                                    break;
                            }
                        });

                        // finalize attrs
                        applyQueuedUpdates();
                        _.each(after,function(op){
                            _.bind(op.callback,op.context)();
                        });
                    });
                });
            };

            return {
                attrs: repAttrs,
                attr: repAttrs,

                column: repFields,
                columns: repFields,
                field: repFields,
                fields: repFields,

                reduce: repReduce,
                inject: repReduce,
                foldl: repReduce,

                map: repMap,
                collect: repMap,

                each: repEach,
                forEach: repEach,

                tap: repTap,
                'do': repTap,

                after: repAfter,
                last: repAfter,
                done: repAfter,

                execute: repExecute,
                go: repExecute,
                run: repExecute
            };
        }(section));
    },


    repeatingSimpleSum = function(section, field, destination){
        repeating(section)
            .attr(destination)
            .field(field)
            .reduce(function(m,r){
                return m + (r.F[field]);
            },0,function(t,r,a){
                a[destination]=t;
            })
            .execute();
    };

    console.log('%c•.¸¸.•*´¨`*•.¸¸.•*´¨`*•.¸  The Aaron Sheet  v'+version+'  ¸.•*´¨`*•.¸¸.•*´¨`*•.¸¸.•','background: linear-gradient(to right,green,white,white,green); color:black;text-shadow: 0 0 8px white;');
    console.log('%c•.¸¸.•*´¨`*•.¸¸.•*´¨`*•.¸  Last update: '+(new Date(lastUpdate*1000))+'  ¸.•*´¨`*•.¸¸.•*´¨`*•.¸¸.•','background: linear-gradient(to right,green,white,white,green); color:black;text-shadow: 0 0 8px white;');


    return {
        /* Repeating Sections */
        repeatingSimpleSum: repeatingSimpleSum,
        repeating: repeating,

        /* Configuration */
        config: setConfigOption,

        /* Debugging */
        callback: wrapCallback,
        callstack: logCallstack,
        debugMode: debugMode,
        _fn: wrapCallback,

        /* Logging */
        debug: logDebug,
        error: logError,
        warn: logWarn,
        info: logInfo,
        notice: logNotice,
        log: logLog
    };
}());
/* ---- END: TheAaronSheet.js ---- */
/* ---- DWVF ---------------------- */
    var DWVF = DWVF || (function(){
        'use strict';
        var version = '1.0',
        calcMod = function (carac) {
            var car = parseInt(carac) || 0;
            var mod = 0;
            if (car<4) {mod=-3;}
                else if (car>3 && car<6) {mod=-2;}
                else if (car>5 && car<9) {mod=-1;}
                else if (car>12 && car<16) {mod=1;}
                else if (car>15 && car<18) {mod=2;}
                else if (car>17) {mod=3;}
                else {mod=0;}
            return mod;
        };
        return {
            calcMod: calcMod
        };
    }());
// Inventaire
on("change:repeating_items:itemweight", function() {
    TAS.repeatingSimpleSum('items','itemweight','load');
});
 on('remove:repeating_items',function(){
    TAS.repeatingSimpleSum('items','itemweight','load');
});
// Caractéristiques et modificateurs
    on("change:strength change:weak", function() {
        getAttrs(["strength","weak"], function(values) {
            var mod=parseInt(DWVF.calcMod(values.strength)) || 0;
            var mal=parseInt(values.weak) || 0;
            setAttrs({
                strmod:mod-mal
            });
        });
    });
    on("change:dexterity change:shaky", function() {
        getAttrs(["dexterity","shaky"], function(values) {
            var mod=parseInt(DWVF.calcMod(values.dexterity)) || 0;
            var mal=parseInt(values.shaky) || 0;
            setAttrs({
                dexmod:mod-mal
            });
        });
    });
    on("change:constitution change:sick", function() {
        getAttrs(["constitution","sick"], function(values) {
            var mod=parseInt(DWVF.calcMod(values.constitution)) || 0;
            var mal=parseInt(values.sick) || 0;
            setAttrs({
                conmod:mod-mal
            });
        });
    });
    on("change:intelligence change:stunned", function() {
        getAttrs(["intelligence","stunned"], function(values) {
            var mod=parseInt(DWVF.calcMod(values.intelligence)) || 0;
            var mal=parseInt(values.stunned) || 0;
            setAttrs({
                intmod:mod-mal
            });
        });
    });
    on("change:wisdom change:confused", function() {
        getAttrs(["wisdom","confused"], function(values) {
            var mod=parseInt(DWVF.calcMod(values.wisdom)) || 0;
            var mal=parseInt(values.confused) || 0;
            setAttrs({
                wismod:mod-mal
            });
        });
    });
    on("change:charisma change:scarred", function() {
        getAttrs(["charisma","scarred"], function(values) {
            var mod=parseInt(DWVF.calcMod(values.charisma)) || 0;
            var mal=parseInt(values.scarred) || 0;
            setAttrs({
                chamod:mod-mal
            });
        });
    });

</script>
<div class="sheet-topbar">
    <img style="width: 200px;" src="https://raw.githubusercontent.com/NathaTerrien/roll20-wip/master/DungeonWorldFrench/dwlogo.png" />    
    <div><input class="sheet-field-name" type="text" placeholder="Nom" name="attr_character_name" /></div>
    <div><input class="sheet-field-class" type="text" placeholder="Classe" name="attr_class" /></div>
</div>

<div class="sheet-statistics">
    <div class="sheet-header">
        <div class="sheet-section-name">Dégâts</div>
        <input type="text" style="font-size: 14px;width: 60px;" name="attr_dtype" placeholder="ex:d6+1" title="Saisissez le dégâts de votre classe (ex : d6), éventuellement avec un bonus (ex: d8+2)" />
        <button type='roll' name='roll_RollDamage' title="Jet de dégâts" 
            value="&{template:jet} {{perso=@{character_name}}} {{name=Dégâts}} {{degats=[[1@{dtype}]]}}"
        ></button>
    </div>
    <div class="sheet-header">
        <div class="sheet-section-name">Armure</div>
        <input type="number" name="attr_armor" value="0"/>
    </div>
    <div class="sheet-header">
        <div class="sheet-section-name">Niveau</div>
        <input type="number" name="attr_level" value="1">
    </div>
    <div class="sheet-header">
        <div class="sheet-section-name">PX</div>
        <input type="number" name="attr_xp" title="Points d'Expérience courants" value="0">
        <span>/</span>  
        <input type="number" name="attr_xp_max" value="[[@{level}+7]]" title="Points d'Expérience pour atteindre le niveau suivant" disabled="true">
    </div>
    <div class="sheet-header">
        <div class="sheet-section-name">PV</div>
        <input type="number" name="attr_hp" value="0" title="Points de Vie courants" />
        <span>/</span>  
        <input type="number" name="attr_hp_max" value="[[@{basehp} + @{constitution}]]" disabled="true" title="Points de Vie maximum" />        
        <span>(Base</span>        
        <input type="number" value="0" name="attr_basehp" title="PV de Base de votre classe, avant l'ajout de la Constitution" />
        <span>)</span>  
    </div>
</div>

<div class="sheet-attributes">
    <div class="sheet-header">
        <label class="sheet-top" for="attr_strength">Force</label>

        <div class="sheet-row-1">
            <input type="number" name="attr_strength" value="0" />
        </div>

        <div class="sheet-row-2">
            <label>
                <input type="checkbox" name="attr_weak" value="1" />
                <span> faible -1</span>
            </label>
        </div>

        <div class="sheet-row-3">
            <input type="number" name="attr_strmod" value="0" title="Ajustement" readonly />
            <button type="roll" name="Force" 
                value="&{template:jet} {{perso=@{character_name}}} {{name=Force}} {{subtags=Action}} {{jet=[[2d6 + @{strmod}]]}}"
            ></button>
        </div>

        <label class="sheet-bottom" for="attr_strmod">FOR</label>
    </div>
    <div class="sheet-header">
        <label class="sheet-top" for="attr_dexterity">Dextérité</label>

        <div class="sheet-row-1">
            <input type="number" name="attr_dexterity"  value="0" />
        </div>

        <div class="sheet-row-2">
            <label>
                <input type="checkbox" name="attr_shaky" value="1" />
                <span> secoué -1</span>
            </label>
        </div>

        <div class="sheet-row-3">
            <input type="number" name="attr_dexmod" value="0" title="Ajustement" readonly />
            <button type="roll" name="Dexterite" 
                value="&{template:jet} {{perso=@{character_name}}} {{name=Dextérité}} {{subtags=Action}} {{jet=[[2d6 + @{dexmod}]]}}"
            ></button>
        </div>

        <label class="sheet-bottom" for="attr_dexmod">DEX</label>
    </div>
    <div class="sheet-header">
        <label class="sheet-top" for="attr_constitution">Constitution</label>

        <div class="sheet-row-1">
            <input type="number" name="attr_constitution"  value="0" />
        </div>

        <div class="sheet-row-2">
            <label>
                <input type="checkbox" name="attr_sick" value="1" />
                <span> malade -1</span>
            </label>
        </div>

        <div class="sheet-row-3">
            <input type="number" name="attr_conmod" value="0" readonly title="Ajustement" />
            <button type="roll" name="Constitution" 
                value="&{template:jet} {{perso=@{character_name}}} {{name=Constitution}} {{subtags=Action}} {{jet=[[2d6 + @{conmod}]]}}"
            ></button>
        </div>

        <label class="sheet-bottom" for="attr_conmod">CON</label>
    </div>
    <div class="sheet-header">
        <label class="sheet-top" for="attr_intelligence">Intelligence</label>

        <div class="sheet-row-1">
            <input type="number" name="attr_intelligence" value="0" />
        </div>

        <div class="sheet-row-2">
            <label>
                <input type="checkbox" name="attr_stunned" value="1" />
                <span> sonné -1</span>
            </label>
        </div>

        <div class="sheet-row-3">
            <input type="number" name="attr_intmod" value="0" readonly title="Ajustement" />
            <button type="roll" name="Intelligence" 
                value="&{template:jet} {{perso=@{character_name}}} {{name=Intelligence}} {{subtags=Action}} {{jet=[[2d6 + @{intmod}]]}}"
            ></button>
        </div>

        <label class="sheet-bottom" for="attr_intmod">INT</label>
    </div>
    <div class="sheet-header">
        <label class="sheet-top" for="attr_wisdom">Sagesse</label>

        <div class="sheet-row-1">
            <input type="number" name="attr_wisdom" value="0" />
        </div>

        <div class="sheet-row-2">
            <label>
                <input type="checkbox" name="attr_confused" value="1" />
                <span> confus -1</span>
            </label>
        </div>

        <div class="sheet-row-3">
            <input type="number" name="attr_wismod" value="0" readonly title="Ajustement" />
            <button type="roll" name="Sagesse" 
                value="&{template:jet} {{perso=@{character_name}}} {{name=Sagesse}} {{subtags=Action}} {{jet=[[2d6 + @{wismod}]]}}"
            ></button>
        </div>

        <label class="sheet-bottom" for="attr_wismod">SAG</label>
    </div>
    <div class="sheet-header">
        <label class="sheet-top" for="attr_charisma">Charisme</label>

        <div class="sheet-row-1">
            <input type="number" name="attr_charisma" value="0" />
        </div>

        <div class="sheet-row-2">
            <label>
                <input type="checkbox" name="attr_scarred" value="1">
                <span> marqué -1</span>
            </label>
        </div>

        <div class="sheet-row-3">
            <input type="number" name="attr_chamod" value="0" readonly title="Ajustement">
            <button type="roll" name="Charisme" 
                value="&{template:jet} {{perso=@{character_name}}} {{name=Charisme}} {{subtags=Action}} {{jet=[[2d6 + @{chamod}]]}}"
            ></button>
        </div>

        <label class="sheet-bottom" for="attr_chamod">CHA</label>
    </div>
</div>

<div class="sheet-col-left">
    <!-- ===== ALIGNMENT ===== -->
    <div class="sheet-header" style="width: 315px;">
        <div class="sheet-section-name" style="width: 85px;">Alignement</div>
        <input type="text" name="attr_alignment" class="sheet-alipeu" placeholder="Alignement" />
    </div>
    <div class="sheet-section-alignment">
        <textarea name="attr_alignment_goal" placeholder="Action"></textarea>
    </div>

    <!-- ===== RACE ===== -->
    <div class="sheet-header" style="width: 315px;">
        <div class="sheet-section-name" style="width: 85px;">Peuple</div>
        <input type="text" name="attr_race"   class="sheet-alipeu" placeholder="Peuple">
    </div>
    <div class="sheet-section-race">
        <textarea name="attr_race_bonus" placeholder="Action"></textarea>
    </div>

    <!-- ===== BONDS ===== -->
    <div class="sheet-header" style="width: 315px;">
        <div class="sheet-section-name">Liens</div>
    </div>
    <div class="sheet-section-bonds">
        <fieldset class="repeating_bonds">
            <textarea placeholder="Lien vide" name="attr_bond"></textarea>
        </fieldset>
    </div>
    
    <!-- ===== GEAR ===== -->
    <div class="sheet-header" style="width: 315px;">
        <div class="sheet-section-name">Matériel</div>
        <span>Charge</span>
        <input type="number" name="attr_load" title="Charge courante" value="0" readonly />
        <span>/</span>
        <input type="number" name="attr_load_max" value="[[@{baseload} + @{strmod}]]" title="Charge maximum" disabled="true" />     
        <span>(Base</span>
        <input type="number" name="attr_baseload" title="Charge de base" value="0" />
        <span>)</span>
        
    </div>
    <div class="sheet-section-gear">
        <fieldset class="repeating_items">
            <div class="sheet-gear">
                <input name="attr_itemname" type="text" style="font-weight: bold;" placeholder="Nom">
                <span>Poids</span><input name="attr_itemweight" type="number" title="Poids" value="0">
                <span>Util.</span><input name="attr_itemuse" type="number" title="Utilisations courantes" value="0">
                <span>/</span>
                <input name="attr_itemuse_max" type="number" title="Utilisations maximum" value="0">
                <input name="attr_itemtags" type="text" placeholder="Marqueurs">
            </div>
        </fieldset>
    </div>
</div>

<div class="sheet-col-right">
    <!-- ===== ACTIONS ===== -->
    <div class="sheet-header" style="width: 100%;">
        <div class="sheet-section-name" style="width: 100%;">Actions</div>
    </div>
    <input type="radio" name="attr_onglaction" value="0" class="sheet-onglbase" title="Actions de Base" checked /><span>Base</span>
    <input type="radio" name="attr_onglaction" value="1" class="sheet-onglspecial" title="Actions Spéciales" /><span>Spéciales</span>
    <input type="radio" name="attr_onglaction" value="2" class="sheet-onglclasse" title="Actions de Départ de Classe" /><span>Départ</span>
    <input type="radio" name="attr_onglaction" value="3" class="sheet-onglavance" title="Actions Avancées de Classe" checked /><span>Avancées</span>
    <input type="radio" name="attr_onglaction" value="4" class="sheet-onglsort" title="Sorts" /><span>Sorts</span>
    
    <!-- ===== BASE ===== -->
    <div class="sheet-onglbase">
        <!-- ===== TAILLER EN PIECES ===== -->
        <div class="sheet-action">
            <button type="roll" class="sheet-btAction" name="TaillerEnPieces" 
                value="&{template:jet} {{perso=@{character_name}}} {{name=@{taillename}}} {{subtags=Action de Base}} {{jet=[[2d6+@{taillemod}+(@{taillebonus})]]}} {{succes=@{taillesucces}}} {{partiel=@{taillepartiel}}} {{degatsaction=[[1@{dtype}]]}}"
            ></button>
            <input type="checkbox" class="sheet-dispcheck" title="Afficher/Masquer la description" name="attr_taille-show" value="1" /><span>y</span>
            <input type="text" name="attr_taillename" class="sheet-actionname" placeholder="Nom de l'action" title="Nom de l'action" value="Tailler En Pièces" />
            <div class="sheet-dispcheck">
                <div class="sheet-actionligne">
                    <span>Desc : </span>
                    <textarea name="attr_taillebody" class="sheet-actiondesc" placeholder="Description de l'Action" title="Description de l'Action">Quand vous attaquez un ennemi en mêlée, jetez 2d6+FOR.</textarea>
                </div>
                <div class="sheet-actionligne">
                    <span>Jet : </span>
                    2d6 + 
                    <SELECT name="attr_taillemod" class="sheet-action" title="Caractéristique utilisée pour le jet d'Action">
                        <OPTION value="0" selected>-</OPTION>
                        <OPTION value="@{strmod}" selected>FOR</OPTION>
                        <OPTION value="@{dexmod}">DEX</OPTION>
                        <OPTION value="@{conmod}">CON</OPTION>
                        <OPTION value="@{intmod}">INT</OPTION>
                        <OPTION value="@{wismod}">SAG</OPTION>
                        <OPTION value="@{chamod}">CHA</OPTION>
                    </SELECT>
                    +
                    <input type="number" class="sheet-action" name="attr_taillebonus" value="0" title="Bonus/Malus au jet" />
                </div>
                <div class="sheet-actionligne">
                    <span>Sur 10+ : </span>
                    <textarea name="attr_taillesucces" class="sheet-actiondesc" placeholder="Résultat de l'Action sur un succès complet" title="Résultat de l'Action sur un succès complet">Vous infligez vos dégâts à l’ennemi et évitez son attaque. Vous pouvez choisir d’infliger +1d6 dégâts en vous exposant à l’attaque ennemie.</textarea>
                </div>
                <div class="sheet-actionligne">
                    <span>Sur 7-9 : </span>
                    <textarea name="attr_taillepartiel" class="sheet-actiondesc" placeholder="Résultat de l'Action sur un succès partiel" title="Résultat de l'Action sur un succès partiel">Vous infligez vos dégâts à l’ennemi mais vous subissez une riposte.</textarea>
                </div>
            </div>                
        </div>

    </div>
    
    <!-- ===== SPECIALES ===== -->
    <div class="sheet-onglspecial">
        
    </div>
    
    <!-- ===== CLASSE ===== -->
    <div class="sheet-onglclasse">
        
    </div>
    
    <!-- ===== AVANCEES ===== -->
    <div class="sheet-onglavance">
        <fieldset class="repeating_moves">
            <div class="sheet-action">
                <button type="roll" class="sheet-btAction" name="Avancee" 
                    value="&{template:jet} {{perso=@{character_name}}} {{name=@{movename}}} {{subtags=Action Avancée}} {{jet=[[2d6+@{movemod}+(@{movebonus})]]}} {{succes=@{movesucces}}} {{partiel=@{movepartiel}}}"
                ></button>
                <input type="checkbox" class="sheet-dispcheck" title="Afficher/Masquer la description" name="attr_move-show" value="1" /><span>y</span>
                <input type="text" name="attr_movename" class="sheet-actionname" placeholder="Nom de l'action" title="Nom de l'action" />
                <div class="sheet-dispcheck">
                    <div class="sheet-actionligne">
                        <span>Desc : </span>
                        <textarea name="attr_movebody" class="sheet-actiondesc" placeholder="Description de l'Action" title="Description de l'Action"></textarea>
                    </div>
                    <div class="sheet-actionligne">
                        <span>Jet : </span>
                        2d6 + 
                        <SELECT name="attr_movemod" class="sheet-action" title="Caractéristique utilisée pour le jet d'Action">
                            <OPTION value="0" selected>-</OPTION>
                            <OPTION value="@{strmod}">FOR</OPTION>
                            <OPTION value="@{dexmod}">DEX</OPTION>
                            <OPTION value="@{conmod}">CON</OPTION>
                            <OPTION value="@{intmod}">INT</OPTION>
                            <OPTION value="@{wismod}">SAG</OPTION>
                            <OPTION value="@{chamod}">CHA</OPTION>
                        </SELECT>
                        +
                        <input type="number" class="sheet-action" name="attr_movebonus" value="0" title="Bonus/Malus au jet" />
                    </div>
                    <div class="sheet-actionligne">
                        <span>Sur 10+ : </span>
                        <textarea name="attr_movesucces" class="sheet-actiondesc" placeholder="Résultat de l'Action sur un succès complet" title="Résultat de l'Action sur un succès complet"></textarea>
                    </div>
                    <div class="sheet-actionligne">
                        <span>Sur 7-9 : </span>
                        <textarea name="attr_movepartiel" class="sheet-actiondesc" placeholder="Résultat de l'Action sur un succès partiel" title="Résultat de l'Action sur un succès partiel"></textarea>
                    </div>
                </div>                
            </div>
        </fieldset>
    </div>

    <!-- ===== SORTS ===== -->
    <div class="sheet-onglsort">
        <fieldset class="repeating_spells sheet-section-spells">
            <input type="text" name="attr_spellname" style="font-weight: bold;" placeholder="Nom du Sort">
            <input type="checkbox" class="sheet-toggle" title="Afficher/Masquer la description du sort" name="attr_spell-show" value="1" />
            <textarea name="attr_spellbody" class="sheet-hide" placeholder="Description du Sort"></textarea>
        </fieldset>
    </div>

</div>
<!-- ==== TEMPLATES ==== -->
<rolltemplate class="sheet-rolltemplate-jet">
    <table>
        {{#perso}}
            <tr>
                <td colspan="2" style="text-align:center;"><b>{{perso}}</b></td>
            </tr>
        {{/perso}}
        <tr><th colspan="2">{{name}}</th></tr>
        {{#subtags}}
            <tr><td colspan="2" class="subheader">{{subtags}}</td></tr>
        {{/subtags}}
        {{#jet}}
            <tr>
                <td class="tcat">Jet</td>
                <td>
                    {{jet}}
                    {{#rollGreater() jet 9}}
                        <span style="color: green;font-weight:bold;">(succès complet)</span>
                    {{/rollGreater() jet 9}}
                    {{#rollBetween() jet 7 9}}
                        <span style="color: black;font-weight:bold;">(succès partiel)</span>
                    {{/rollBetween() jet 7 9}}
                    {{#rollLess() jet 7}}
                        <span style="color: red;font-weight:bold;">(échec)</span>
                    {{/rollLess() jet 7}}
                </td>
            </tr>
            {{#degatsaction}}
                {{#rollGreater() jet 6}}
                    <tr>
                        <td class="tcat">Dégâts</td>
                        <td>{{degats}}</td>
                    </tr>
                {{/rollGreater() jet 6}}
            {{/degatsaction}}
        {{/jet}}
        {{#degats}}
            <tr>
                <td class="tcat">Jet</td>
                <td>{{degats}}</td>
            </tr>
        {{/degats}}
        {{#succes}}
            {{#rollGreater() jet 9}}
                <tr><td colspan="2"><div class="jetdesc">{{succes}}</div></td></tr>
            {{/rollGreater() jet 9}}
        {{/succes}}
        {{#partiel}}
            {{#rollBetween() jet 7 9}}
                <tr><td colspan="2"><div class="jetdesc">{{partiel}}</div></td></tr>
            {{/rollBetween() jet 7 9}}
        {{/partiel}}
    </table>
</rolltemplate>

